"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.box = void 0;
const os_1 = require("os");
const CORNER_TL = '\u2554';
const CORNER_TR = '\u2557';
const CORNER_BL = '\u255a';
const CORNER_BR = '\u255d';
const SEP_L = '\u255f';
const SEP_R = '\u2562';
const LINE_H = '\u2550';
const LINE_S = '\u2500';
const LINE_V = '\u2551';
const WRAP_OFF = '\u001b[?7l';
const WRAP_ON = '\u001b[?7h';
const CLEAR_TO_EOL = '\u001b[0K';
const MOVE_TO_BOL = '\u001b[1000D';
const colors_1 = require("./colors");
async function write(...args) {
    const string = args.length > 1 ? args.join('') : args[0];
    return new Promise((resolve, reject) => {
        process.stdout.write(string, (error) => error ? reject(error) : resolve());
    });
}
async function box(...args) {
    if (args.length < 1)
        return;
    const width = process.stdout.columns - 6;
    const clearRight = `${MOVE_TO_BOL}\u001b[${width}C${CLEAR_TO_EOL}`;
    const doubleLine = LINE_H.repeat(width);
    const singleLine = LINE_S.repeat(width);
    let firstBox = true;
    if (process.env.CI || (!process.stdout.isTTY)) {
        for (const text of args) {
            if (firstBox)
                firstBox = false;
            else
                await write(os_1.EOL);
            await write(text.trim(), os_1.EOL);
        }
        return;
    }
    for (const text of args) {
        if (firstBox) {
            await write(colors_1.K, CORNER_TL, doubleLine, CORNER_TR, colors_1.X, os_1.EOL);
            firstBox = false;
        }
        else {
            await write(colors_1.K, SEP_L, singleLine, SEP_R, colors_1.X, os_1.EOL);
        }
        for (const line of text.trim().split('\n')) {
            await write(MOVE_TO_BOL, '  ', WRAP_OFF, colors_1.X, line, MOVE_TO_BOL, WRAP_OFF, colors_1.K, LINE_V, ' ', MOVE_TO_BOL, clearRight, ' ', colors_1.K, LINE_V, WRAP_ON, colors_1.X, os_1.EOL);
        }
    }
    await write(colors_1.K, CORNER_BL, doubleLine, CORNER_BR, colors_1.X, os_1.EOL);
}
exports.box = box;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9ib3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkJBQXdCO0FBRXhCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUMxQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUE7QUFDMUIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFBO0FBQzFCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUUxQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUE7QUFDdEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFBO0FBRXRCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQTtBQUN2QixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUE7QUFDdkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFBO0FBRXZCLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQTtBQUM3QixNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUE7QUFFNUIsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFBO0FBQ2hDLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQTtBQUVsQyxxQ0FBaUQ7QUFFakQsS0FBSyxVQUFVLEtBQUssQ0FBQyxHQUFHLElBQWM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN4RCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDNUUsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRU0sS0FBSyxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQWM7SUFDekMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxPQUFNO0lBRTNCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQTtJQUN4QyxNQUFNLFVBQVUsR0FBRyxHQUFHLFdBQVcsVUFBVSxLQUFLLElBQUksWUFBWSxFQUFFLENBQUE7SUFDbEUsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2QyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQTtJQUduQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzlDLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3ZCLElBQUksUUFBUTtnQkFBRSxRQUFRLEdBQUcsS0FBSyxDQUFBOztnQkFDekIsTUFBTSxLQUFLLENBQUMsUUFBRyxDQUFDLENBQUE7WUFDckIsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsT0FBTTtLQUNQO0lBR0QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUU7UUFFdkIsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLEtBQUssQ0FBQyxVQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBSyxFQUFFLFFBQUcsQ0FBQyxDQUFBO1lBQ2hFLFFBQVEsR0FBRyxLQUFLLENBQUE7U0FDakI7YUFBTTtZQUNMLE1BQU0sS0FBSyxDQUFDLFVBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxVQUFLLEVBQUUsUUFBRyxDQUFDLENBQUE7U0FDekQ7UUFHRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUMsTUFBTSxLQUFLLENBQ1AsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBSyxFQUFFLElBQUksRUFDeEMsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFDekMsV0FBVyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsVUFBSyxFQUFFLE1BQU0sRUFDM0MsT0FBTyxFQUFFLFVBQUssRUFBRSxRQUFHLENBQ3RCLENBQUE7U0FDRjtLQUNGO0lBQ0QsTUFBTSxLQUFLLENBQUMsVUFBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQUssRUFBRSxRQUFHLENBQUMsQ0FBQTtBQUNsRSxDQUFDO0FBeENELGtCQXdDQyJ9